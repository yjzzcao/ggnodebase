#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('log');
const http = require('http');

/**
 * 将端口标准化为数字、字符串或false
 * @param val 端口参数
 */
const normalizePort = val => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // 通道名称
    return val;
  }

  if (port >= 0) {
    // 端口号
    return port;
  }

  return false;
}
/**
 * 事件侦听器用于HTTP服务器“错误”事件。
 * @param error 错误对象
 */
const onError = error => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * 事件侦听器用于HTTP服务器“侦听”事件。
 */
const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// 从环境中获取端口号并在Express中存储。
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// 创建HTTP服务
const server = http.createServer(app);

// 在所有网络接口上监听提供的端口。
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
